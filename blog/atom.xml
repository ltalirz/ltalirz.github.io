<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ltalirz.github.io/blog</id>
    <title>Leopold Talirz Blog</title>
    <updated>2016-04-11T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ltalirz.github.io/blog"/>
    <subtitle>Leopold Talirz Blog</subtitle>
    <icon>https://ltalirz.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Link numpy & scipy against the MKL]]></title>
        <id>https://ltalirz.github.io/blog/numpy-scipy-mkl</id>
        <link href="https://ltalirz.github.io/blog/numpy-scipy-mkl"/>
        <updated>2016-04-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The pip package management system is a very convenient way of managing custom python installations that are not managed by the operating system (such as virtual python environments).]]></summary>
        <content type="html"><![CDATA[<p>The pip package management system is a very convenient way of managing custom python installations that are not managed by the operating system (such as <a href="https://virtualenv.pypa.io/en/latest/" target="_blank" rel="noopener noreferrer">virtual python environments</a>).</p>
<p>pip install numpy scipy essentially works out of the box. Yet, when it comes to numpy and scipy, significant speed can be gained by <a href="https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl" target="_blank" rel="noopener noreferrer">linking these modules against the Intel Math Kernel Library (MKL)</a> for linear algebra operations.</p>
<p>You can tell pip to do that in the following way:</p>
<p>(1) Tell numpy where to find the MKL</p>
<p>Create a file <code>.numpy-site.cfg</code> in your home directory with a content similar to</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[mkl]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">library_dirs = /opt/intel/composer_xe_2013.1.117/mkl/lib/intel64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">include_dirs = /opt/intel/composer_xe_2013.1.117/mkl/include</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkl_libs = mkl_rt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lapack_libs =</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>(2) Tell pip to use the Intel compiler</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install numpy \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="config" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="build_clib" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="build_ext" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pip install scipy \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="config" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--fcompiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="build_clib" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--fcompiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="build_ext" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--compiler=intelem" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--global-option="--fcompiler=intelem"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Alternatively, you may also create a file <code>.pydistutils.cfg</code> in your home directory with content</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[config]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">compiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fcompiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[build_clib]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">compiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fcompiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[build]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">compiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[build_ext]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">compiler=intelem</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fcompiler=intelem</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and then simply run</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install numpy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pip install scipy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note: If you don't provide this info to pip, it will look for and use the GNU compiler collection by default.</p>
<p>Note: While numpy installed without problems I did receive a compilation error with icc 14.0.0. Possibly related to <a href="https://mail.scipy.org/pipermail/scipy-dev/2013-March/018506.html" target="_blank" rel="noopener noreferrer">this</a>.</p>
<p>Parts (1) and (2) relied on the following StackExchange posts</p>
<ul>
<li><a href="http://stackoverflow.com/questions/13769936/supplying-numpy-site-cfg-arguments-to-pip" target="_blank" rel="noopener noreferrer">http://stackoverflow.com/questions/13769936/supplying-numpy-site-cfg-arguments-to-pip</a></li>
<li><a href="http://stackoverflow.com/questions/15725869/pass-build-ext-options-to-pip-install" target="_blank" rel="noopener noreferrer">http://stackoverflow.com/questions/15725869/pass-build-ext-options-to-pip-install</a></li>
</ul>]]></content>
        <author>
            <name>Leopold Talirz</name>
            <uri>https://github.com/ltalirz</uri>
        </author>
        <category label="python" term="python"/>
        <category label="numpy" term="numpy"/>
        <category label="scipy" term="scipy"/>
        <category label="mkl" term="mkl"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Importing cube files into Blender]]></title>
        <id>https://ltalirz.github.io/blog/cube-files-blender</id>
        <link href="https://ltalirz.github.io/blog/cube-files-blender"/>
        <updated>2016-03-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this post, we are going to import the grid data from a Gaussian cube file into Blender, an open-source 3d graphics software.]]></summary>
        <content type="html"><![CDATA[<p>In this post, we are going to import the grid data from a <a href="http://paulbourke.net/dataformats/cube/" target="_blank" rel="noopener noreferrer">Gaussian cube file</a> into <a href="https://www.blender.org/" target="_blank" rel="noopener noreferrer">Blender</a>, an open-source 3d graphics software.</p>
<p>Why this effort? In the atomistic simulations community, we are used to displaying wave functions and electron densities as isosurfaces and lots of software exists that makes this process very easy. But an isosurface doesn't tell the whole story. Blender gives us the opportunity to visualize the electron density as a kind of "smoke cloud", where the density determines how light scatters going through the cloud (we may then add an intrinsic glow to the cloud as well). While this is not needed in the daily routine of understanding the basic features of an electron distribution, it allows to convey the inherent fuzzyness in a single image.</p>
<p>Of course, there is many more reasons, why one may want to use Blender. Among its many features, some of the ones relevant to atomistic simulations are</p>
<ol>
<li>a great graphical user interface<sup><a href="https://ltalirz.github.io/blog/cube-files-blender#user-content-fn-1-1a607c" id="user-content-fnref-1-1a607c" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>
ray-tracing capabilities</li>
<li>advanced animation capabilities (including physics!)</li>
<li>a Python interface that allows for automating workflows</li>
</ol>
<p>However, Blender was originally developed for animation studios, and so the import of file formats customary in atomistic simulations is not always straightforward.</p>
<p>For atomic structure data, several routes are already available</p>
<ul>
<li>The <a href="https://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Import-Export/XYZ" target="_blank" rel="noopener noreferrer">XYZ addon</a> for directly importing XYZ (.xyz) files into Blender</li>
<li>Via <a href="http://www.ks.uiuc.edu/Research/vmd/" target="_blank" rel="noopener noreferrer">VMD</a>, exporting to the Wavefront Objects (.obj/.mtl), which can be imported by Blender
This allows not only to import atomic structure models, but also isosurfaces etc.</li>
<li>Via <a href="https://wiki.fysik.dtu.dk/ase/" target="_blank" rel="noopener noreferrer">ASE</a>, exporting to the X3D (.x3d) format, which can be imported by Blender</li>
</ul>
<p>But how would we go about importing a function f(x,y,z) defined on a regular 3d grid, such as an orbital wave function or electron density? In this post, we are going to import the grid data from a Gaussian cube file.</p>
<p>First, we have to note that the capability to render this kind data (called "<a href="https://en.wikipedia.org/wiki/Voxel" target="_blank" rel="noopener noreferrer">voxels</a>" in the Blender community) is currently <a href="https://developer.blender.org/T41179" target="_blank" rel="noopener noreferrer">available only for the internal "Blender Render"</a> engine. While the "Cycles Render" engine is being used and developed more actively, we will have to abandon it for now. "Blender Internal" offers two alternative file formats for importing voxel data</p>
<ul>
<li>"8bit raw", in which f(x,y,z) is stored as integers ranging from 0 to 255</li>
<li>"Blender voxel", in which f(x,y,z) is stored as 32bit floats.</li>
</ul>
<p>The first format is basically unusable for wave functions/densities of molecules - a relative accuracy of 1/256 doesn't get you very far when sampling exponential decays. We thus choose the latter format.</p>
<p>So, we need to convert the .cube file into a .bvox file. Adapting <a href="http://pythology.blogspot.co.uk/2014/08/you-can-do-cool-stuff-with-manual.html" target="_blank" rel="noopener noreferrer">a post by Matthias Meschede</a>, this is easily achieved using a combination of ASE and numpy:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#!/usr/bin/env python</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> ase</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cube</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PROJ-WFN_00183_1-1_0.cube'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Reading cube file {}"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> atoms </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ase</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cube</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read_cube_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Here, I want the electron density, not the wave function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token operator" style="color:#393A34">**</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># If data is too large, just reduce it by striding with steps &gt;1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sy</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">sx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">sy</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">sz</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Note the reversed order!!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nz</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ny</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shape</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nframes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">header </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">nx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">ny</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">nz</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">nframes</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#open and write to file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vdata </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flatten</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> np</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vfname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">splitext</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'.bvox'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vfile </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vfname</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">'wb'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Writing Blender voxel file {}"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vfname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">header</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">astype</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'&lt;i4'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tofile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vfile</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vdata</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">astype</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'&lt;f4'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tofile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vfile</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we need to load the file into Blender. The steps are essentially the following</p>
<ol>
<li>Open Blender and select "Blender Render"</li>
<li>Select the default cube, set its material to "Volume" and its "Density" to 0
<img decoding="async" loading="lazy" alt="default cube" src="https://ltalirz.github.io/assets/images/bl1-507c1451c55c21d58461730bd9ed0240.png" width="400" height="246" class="img_ev3q"></li>
<li>Add a new texture of type "Voxel Data", file format "Blender Voxel" and load the file
Note: You don't get any confirmation of the file being loaded but if you don't get an error message, assume that it is.</li>
<li>Activate "Still frame" and set still frame number to 1 (not 0!)
<img decoding="async" loading="lazy" alt="still frame" src="https://ltalirz.github.io/assets/images/bl2-fafd701f34f6bb3ff0f621354e4a8300.png" width="400" height="253" class="img_ev3q"></li>
<li>Activate influence on density and emission and ramp up the intensity until you see something in the rendered output. Note: You may never see anything in the preview window - don't let this confuse you. should be able to continue by yourself and unleash your creativity on the voxels!
<img decoding="async" loading="lazy" alt="density" src="https://ltalirz.github.io/assets/images/bl3-aff45cd9377e47575ff71588bb85be70.png" width="400" height="252" class="img_ev3q"></li>
</ol>
<p>To give you one possible idea of what can be done, here is what I came up with for my first Blender project</p>
<p><img decoding="async" loading="lazy" alt="End state of N=7 armchair graphene nanoribbon" src="https://ltalirz.github.io/assets/images/gnr-04a7ec97a4cddbef14d53dc4d299d510.png" width="320" height="320" class="img_ev3q"><br>
<em>End state of N=7 armchair graphene nanoribbon</em></p>
<p>Cheers!</p>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://ltalirz.github.io/blog/cube-files-blender#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-1a607c">
<p>This may sound trivial, but alternatives, such as POV-ray may have no gui whatsoever. <a href="https://ltalirz.github.io/blog/cube-files-blender#user-content-fnref-1-1a607c" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Leopold Talirz</name>
            <uri>https://github.com/ltalirz</uri>
        </author>
        <category label="blender" term="blender"/>
        <category label="cube" term="cube"/>
    </entry>
</feed>